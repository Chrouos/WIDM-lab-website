/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Member from '../model/Member';
import Members from '../model/Members';

/**
* Member service.
* @module api/MemberApi
* @version 1.0.0
*/
export default class MemberApi {

    /**
    * Constructs a new MemberApi. 
    * @alias module:api/MemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the memberGet operation.
     * @callback module:api/MemberApi~memberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get members
     * @param {module:api/MemberApi~memberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Members}
     */
    memberGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberMemberIdDelete operation.
     * @callback module:api/MemberApi~memberMemberIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete member
     * @param {Number} memberId 
     * @param {module:api/MemberApi~memberMemberIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    memberMemberIdDelete(memberId, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdDelete");
      }

      let pathParams = {
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/member/{member_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberMemberIdPatch operation.
     * @callback module:api/MemberApi~memberMemberIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * patch member
     * @param {Number} memberId 
     * @param {Object} opts Optional parameters
     * @param {String} [memberName] 
     * @param {String} [memberIntro] 
     * @param {module:api/MemberApi~memberMemberIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    memberMemberIdPatch(memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdPatch");
      }

      let pathParams = {
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'member_name': opts['memberName'],
        'member_intro': opts['memberIntro']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/member/{member_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberMemberIdPut operation.
     * @callback module:api/MemberApi~memberMemberIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * put member
     * @param {Number} memberId 
     * @param {String} memberName 
     * @param {String} memberIntro 
     * @param {module:api/MemberApi~memberMemberIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    memberMemberIdPut(memberId, memberName, memberIntro, callback) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdPut");
      }
      // verify the required parameter 'memberName' is set
      if (memberName === undefined || memberName === null) {
        throw new Error("Missing the required parameter 'memberName' when calling memberMemberIdPut");
      }
      // verify the required parameter 'memberIntro' is set
      if (memberIntro === undefined || memberIntro === null) {
        throw new Error("Missing the required parameter 'memberIntro' when calling memberMemberIdPut");
      }

      let pathParams = {
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'member_name': memberName,
        'member_intro': memberIntro
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/member/{member_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberPost operation.
     * @callback module:api/MemberApi~memberPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * post member
     * @param {String} memberName 
     * @param {String} memberIntro 
     * @param {module:api/MemberApi~memberPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    memberPost(memberName, memberIntro, callback) {
      let postBody = null;
      // verify the required parameter 'memberName' is set
      if (memberName === undefined || memberName === null) {
        throw new Error("Missing the required parameter 'memberName' when calling memberPost");
      }
      // verify the required parameter 'memberIntro' is set
      if (memberIntro === undefined || memberIntro === null) {
        throw new Error("Missing the required parameter 'memberIntro' when calling memberPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'member_name': memberName,
        'member_intro': memberIntro
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/member', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
