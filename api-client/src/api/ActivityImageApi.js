/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityImage from '../model/ActivityImage';

/**
* ActivityImage service.
* @module api/ActivityImageApi
* @version 1.0.0
*/
export default class ActivityImageApi {

    /**
    * Constructs a new ActivityImageApi. 
    * @alias module:api/ActivityImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityActivityIdActivityImageActivityImageUuidDelete operation.
     * @callback module:api/ActivityImageApi~activityActivityIdActivityImageActivityImageUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @param {module:api/ActivityImageApi~activityActivityIdActivityImageActivityImageUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImageActivityImageUuidDelete(activityId, activityImageUuid, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageActivityImageUuidDelete");
      }
      // verify the required parameter 'activityImageUuid' is set
      if (activityImageUuid === undefined || activityImageUuid === null) {
        throw new Error("Missing the required parameter 'activityImageUuid' when calling activityActivityIdActivityImageActivityImageUuidDelete");
      }

      let pathParams = {
        'activity_id': activityId,
        'activity_image_uuid': activityImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image/{activity_image_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityActivityIdActivityImageActivityImageUuidGet operation.
     * @callback module:api/ActivityImageApi~activityActivityIdActivityImageActivityImageUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @param {module:api/ActivityImageApi~activityActivityIdActivityImageActivityImageUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activityActivityIdActivityImageActivityImageUuidGet(activityId, activityImageUuid, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageActivityImageUuidGet");
      }
      // verify the required parameter 'activityImageUuid' is set
      if (activityImageUuid === undefined || activityImageUuid === null) {
        throw new Error("Missing the required parameter 'activityImageUuid' when calling activityActivityIdActivityImageActivityImageUuidGet");
      }

      let pathParams = {
        'activity_id': activityId,
        'activity_image_uuid': activityImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image/{activity_image_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityActivityIdActivityImageGet operation.
     * @callback module:api/ActivityImageApi~activityActivityIdActivityImageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get activity images
     * @param {Number} activityId 
     * @param {module:api/ActivityImageApi~activityActivityIdActivityImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImageGet(activityId, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageGet");
      }

      let pathParams = {
        'activity_id': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityActivityIdActivityImagePost operation.
     * @callback module:api/ActivityImageApi~activityActivityIdActivityImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * post activity image
     * @param {Number} activityId 
     * @param {File} image 
     * @param {module:api/ActivityImageApi~activityActivityIdActivityImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImagePost(activityId, image, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImagePost");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling activityActivityIdActivityImagePost");
      }

      let pathParams = {
        'activity_id': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
