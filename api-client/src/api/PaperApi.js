/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Paper from '../model/Paper';
import Papers from '../model/Papers';

/**
* Paper service.
* @module api/PaperApi
* @version 1.0.0
*/
export default class PaperApi {

    /**
    * Constructs a new PaperApi. 
    * @alias module:api/PaperApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the paperGet operation.
     * @callback module:api/PaperApi~paperGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Papers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get_papers
     * @param {Object} opts Optional parameters
     * @param {String} [paperTag] 
     * @param {String} [paperAuthor] 
     * @param {module:api/PaperApi~paperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Papers}
     */
    paperGet() {
      let postBody = null;
  
      let pathParams = {};
      let queryParams = {};
      let headerParams = {};
      let formParams = {};
  
      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
  
      return new Promise((resolve, reject) => {
        this.apiClient.callApi(
          '/paper', 'GET',
          pathParams, queryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, null,
          (error, data, response) => {
            if (error) {
              console.error('API 调用失败:', response ? response.text : '没有响应');
              reject(error);
            } else {
              console.log('API 返回数据:', data);
              resolve(data);
            }
          }
        );
      });
    }

    /**
     * Callback function to receive the result of the paperPaperIdDelete operation.
     * @callback module:api/PaperApi~paperPaperIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Paper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete paper
     * @param {Number} paperId 
     * @param {module:api/PaperApi~paperPaperIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Paper}
     */
    paperPaperIdDelete(paperId, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdDelete");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper/{paper_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPatch operation.
     * @callback module:api/PaperApi~paperPaperIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Paper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * patch paper
     * @param {Number} paperId 
     * @param {Object} opts Optional parameters
     * @param {Number} [paperPublishYear] 
     * @param {String} [paperTitle] 
     * @param {String} [paperOrigin] 
     * @param {String} [paperLink] 
     * @param {module:api/PaperApi~paperPaperIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Paper}
     */
    paperPaperIdPatch(paperId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPatch");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'paper_publish_year': opts['paperPublishYear'],
        'paper_title': opts['paperTitle'],
        'paper_origin': opts['paperOrigin'],
        'paper_link': opts['paperLink']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper/{paper_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPut operation.
     * @callback module:api/PaperApi~paperPaperIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Paper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * put paper
     * @param {Number} paperId 
     * @param {Number} paperPublishYear 
     * @param {String} paperTitle 
     * @param {String} paperOrigin 
     * @param {String} paperLink 
     * @param {module:api/PaperApi~paperPaperIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Paper}
     */
    paperPaperIdPut(paperId, paperPublishYear, paperTitle, paperOrigin, paperLink, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPut");
      }
      // verify the required parameter 'paperPublishYear' is set
      if (paperPublishYear === undefined || paperPublishYear === null) {
        throw new Error("Missing the required parameter 'paperPublishYear' when calling paperPaperIdPut");
      }
      // verify the required parameter 'paperTitle' is set
      if (paperTitle === undefined || paperTitle === null) {
        throw new Error("Missing the required parameter 'paperTitle' when calling paperPaperIdPut");
      }
      // verify the required parameter 'paperOrigin' is set
      if (paperOrigin === undefined || paperOrigin === null) {
        throw new Error("Missing the required parameter 'paperOrigin' when calling paperPaperIdPut");
      }
      // verify the required parameter 'paperLink' is set
      if (paperLink === undefined || paperLink === null) {
        throw new Error("Missing the required parameter 'paperLink' when calling paperPaperIdPut");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'paper_publish_year': paperPublishYear,
        'paper_title': paperTitle,
        'paper_origin': paperOrigin,
        'paper_link': paperLink
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper/{paper_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPost operation.
     * @callback module:api/PaperApi~paperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Paper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * post paper
     * @param {Number} paperPublishYear 
     * @param {String} paperTitle 
     * @param {String} paperOrigin 
     * @param {String} paperLink 
     * @param {module:api/PaperApi~paperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Paper}
     */
    paperPost(paperPublishYear, paperTitle, paperOrigin, paperLink, callback) {
      let postBody = null;
      // verify the required parameter 'paperPublishYear' is set
      if (paperPublishYear === undefined || paperPublishYear === null) {
        throw new Error("Missing the required parameter 'paperPublishYear' when calling paperPost");
      }
      // verify the required parameter 'paperTitle' is set
      if (paperTitle === undefined || paperTitle === null) {
        throw new Error("Missing the required parameter 'paperTitle' when calling paperPost");
      }
      // verify the required parameter 'paperOrigin' is set
      if (paperOrigin === undefined || paperOrigin === null) {
        throw new Error("Missing the required parameter 'paperOrigin' when calling paperPost");
      }
      // verify the required parameter 'paperLink' is set
      if (paperLink === undefined || paperLink === null) {
        throw new Error("Missing the required parameter 'paperLink' when calling paperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'paper_publish_year': paperPublishYear,
        'paper_title': paperTitle,
        'paper_origin': paperOrigin,
        'paper_link': paperLink
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
