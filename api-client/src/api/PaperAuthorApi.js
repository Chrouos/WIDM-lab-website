/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaperAuthor from '../model/PaperAuthor';
import PaperAuthors from '../model/PaperAuthors';

/**
* PaperAuthor service.
* @module api/PaperAuthorApi
* @version 1.0.0
*/
export default class PaperAuthorApi {

    /**
    * Constructs a new PaperAuthorApi. 
    * @alias module:api/PaperAuthorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the paperPaperIdPaperAuthorAuthorIdDelete operation.
     * @callback module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaperAuthor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete author
     * @param {Number} paperId 
     * @param {Number} authorId 
     * @param {module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaperAuthor}
     */
    paperPaperIdPaperAuthorAuthorIdDelete(paperId, authorId, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAuthorAuthorIdDelete");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling paperPaperIdPaperAuthorAuthorIdDelete");
      }

      let pathParams = {
        'paper_id': paperId,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperAuthor;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-author/{author_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPaperAuthorAuthorIdGet operation.
     * @callback module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaperAuthor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get author
     * @param {Number} paperId 
     * @param {Number} authorId 
     * @param {module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaperAuthor}
     */
    paperPaperIdPaperAuthorAuthorIdGet(paperId, authorId, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAuthorAuthorIdGet");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling paperPaperIdPaperAuthorAuthorIdGet");
      }

      let pathParams = {
        'paper_id': paperId,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperAuthor;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-author/{author_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPaperAuthorAuthorIdPatch operation.
     * @callback module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaperAuthor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update author
     * @param {Number} paperId 
     * @param {Number} authorId 
     * @param {String} authorName 
     * @param {module:api/PaperAuthorApi~paperPaperIdPaperAuthorAuthorIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaperAuthor}
     */
    paperPaperIdPaperAuthorAuthorIdPatch(paperId, authorId, authorName, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAuthorAuthorIdPatch");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling paperPaperIdPaperAuthorAuthorIdPatch");
      }
      // verify the required parameter 'authorName' is set
      if (authorName === undefined || authorName === null) {
        throw new Error("Missing the required parameter 'authorName' when calling paperPaperIdPaperAuthorAuthorIdPatch");
      }

      let pathParams = {
        'paper_id': paperId,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'author_name': authorName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PaperAuthor;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-author/{author_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPaperAuthorGet operation.
     * @callback module:api/PaperAuthorApi~paperPaperIdPaperAuthorGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaperAuthors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get paper author
     * @param {Number} paperId 
     * @param {module:api/PaperAuthorApi~paperPaperIdPaperAuthorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaperAuthors}
     */
    paperPaperIdPaperAuthorGet(paperId, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAuthorGet");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperAuthors;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-author', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paperPaperIdPaperAuthorPost operation.
     * @callback module:api/PaperAuthorApi~paperPaperIdPaperAuthorPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaperAuthor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * post paper author
     * @param {Number} paperId 
     * @param {String} authorName 
     * @param {module:api/PaperAuthorApi~paperPaperIdPaperAuthorPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaperAuthor}
     */
    paperPaperIdPaperAuthorPost(paperId, authorName, callback) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAuthorPost");
      }
      // verify the required parameter 'authorName' is set
      if (authorName === undefined || authorName === null) {
        throw new Error("Missing the required parameter 'authorName' when calling paperPaperIdPaperAuthorPost");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'author_name': authorName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PaperAuthor;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-author', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
