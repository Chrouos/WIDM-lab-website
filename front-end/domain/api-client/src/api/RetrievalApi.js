/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScrapyingStatus from '../model/ScrapyingStatus';

/**
* Retrieval service.
* @module api/RetrievalApi
* @version 1.0.0
*/
export default class RetrievalApi {

    /**
    * Constructs a new RetrievalApi. 
    * @alias module:api/RetrievalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * chat retrieval augmented generation
     * @param {String} queryString query string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    retrievalQueryGetWithHttpInfo(queryString) {
      let postBody = null;
      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling retrievalQueryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query_string': queryString
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/retrieval/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * chat retrieval augmented generation
     * @param {String} queryString query string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    retrievalQueryGet(queryString) {
      return this.retrievalQueryGetWithHttpInfo(queryString)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * check the status of scrapying
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScrapyingStatus} and HTTP response
     */
    retrievalScrapyingStatusGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ScrapyingStatus;
      return this.apiClient.callApi(
        '/retrieval/scrapying-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * check the status of scrapying
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScrapyingStatus}
     */
    retrievalScrapyingStatusGet() {
      return this.retrievalScrapyingStatusGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * start scrapying
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScrapyingStatus} and HTTP response
     */
    retrievalStartScrapyingGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ScrapyingStatus;
      return this.apiClient.callApi(
        '/retrieval/start-scrapying', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * start scrapying
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScrapyingStatus}
     */
    retrievalStartScrapyingGet() {
      return this.retrievalStartScrapyingGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
