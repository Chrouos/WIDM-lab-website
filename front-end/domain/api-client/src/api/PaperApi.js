/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Paper from '../model/Paper';
import PaperPostRequest from '../model/PaperPostRequest';

/**
* Paper service.
* @module api/PaperApi
* @version 1.0.0
*/
export default class PaperApi {

    /**
    * Constructs a new PaperApi. 
    * @alias module:api/PaperApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * get_papers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Paper} and HTTP response
     */
    paperGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get_papers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Paper}
     */
    paperGet() {
      return this.paperGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete paper
     * @param {Number} paperId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Paper} and HTTP response
     */
    paperPaperIdDeleteWithHttpInfo(paperId) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdDelete");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper/{paper_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete paper
     * @param {Number} paperId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Paper}
     */
    paperPaperIdDelete(paperId) {
      return this.paperPaperIdDeleteWithHttpInfo(paperId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * patch paper
     * @param {Number} paperId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaperPostRequest} [paper] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Paper} and HTTP response
     */
    paperPaperIdPatchWithHttpInfo(paperId, opts) {
      opts = opts || {};
      let postBody = opts['paper'];
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPatch");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper/{paper_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * patch paper
     * @param {Number} paperId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaperPostRequest} opts.paper 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Paper}
     */
    paperPaperIdPatch(paperId, opts) {
      return this.paperPaperIdPatchWithHttpInfo(paperId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post paper
     * @param {Object} opts Optional parameters
     * @param {module:model/PaperPostRequest} [paper] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Paper} and HTTP response
     */
    paperPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['paper'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Paper;
      return this.apiClient.callApi(
        '/paper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post paper
     * @param {Object} opts Optional parameters
     * @param {module:model/PaperPostRequest} opts.paper 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Paper}
     */
    paperPost(opts) {
      return this.paperPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
