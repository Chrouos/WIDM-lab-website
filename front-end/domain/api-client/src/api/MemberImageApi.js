/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MemberImage from '../model/MemberImage';
import PaperAttachment from '../model/PaperAttachment';

/**
* MemberImage service.
* @module api/MemberImageApi
* @version 1.0.0
*/
export default class MemberImageApi {

    /**
    * Constructs a new MemberImageApi. 
    * @alias module:api/MemberImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete member image
     * @param {Number} memberId 
     * @param {String} memberImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperAttachment} and HTTP response
     */
    memberMemberIdMemberImageMemberImageUuidDeleteWithHttpInfo(memberId, memberImageUuid) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdMemberImageMemberImageUuidDelete");
      }
      // verify the required parameter 'memberImageUuid' is set
      if (memberImageUuid === undefined || memberImageUuid === null) {
        throw new Error("Missing the required parameter 'memberImageUuid' when calling memberMemberIdMemberImageMemberImageUuidDelete");
      }

      let pathParams = {
        'member_id': memberId,
        'member_image_uuid': memberImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperAttachment;
      return this.apiClient.callApi(
        '/member/{member_id}/member-image/{member_image_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete member image
     * @param {Number} memberId 
     * @param {String} memberImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperAttachment}
     */
    memberMemberIdMemberImageMemberImageUuidDelete(memberId, memberImageUuid) {
      return this.memberMemberIdMemberImageMemberImageUuidDeleteWithHttpInfo(memberId, memberImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get member images
     * @param {Number} memberId 
     * @param {String} memberImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    memberMemberIdMemberImageMemberImageUuidGetWithHttpInfo(memberId, memberImageUuid) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdMemberImageMemberImageUuidGet");
      }
      // verify the required parameter 'memberImageUuid' is set
      if (memberImageUuid === undefined || memberImageUuid === null) {
        throw new Error("Missing the required parameter 'memberImageUuid' when calling memberMemberIdMemberImageMemberImageUuidGet");
      }

      let pathParams = {
        'member_id': memberId,
        'member_image_uuid': memberImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/member/{member_id}/member-image/{member_image_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get member images
     * @param {Number} memberId 
     * @param {String} memberImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    memberMemberIdMemberImageMemberImageUuidGet(memberId, memberImageUuid) {
      return this.memberMemberIdMemberImageMemberImageUuidGetWithHttpInfo(memberId, memberImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post member image
     * @param {Number} memberId 
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberImage} and HTTP response
     */
    memberMemberIdMemberImagePostWithHttpInfo(memberId, image) {
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling memberMemberIdMemberImagePost");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling memberMemberIdMemberImagePost");
      }

      let pathParams = {
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = MemberImage;
      return this.apiClient.callApi(
        '/member/{member_id}/member-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post member image
     * @param {Number} memberId 
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberImage}
     */
    memberMemberIdMemberImagePost(memberId, image) {
      return this.memberMemberIdMemberImagePostWithHttpInfo(memberId, image)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
