/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectTask from '../model/ProjectTask';
import ProjectTaskInput from '../model/ProjectTaskInput';
import ProjectTasks from '../model/ProjectTasks';

/**
* ProjectTask service.
* @module api/ProjectTaskApi
* @version 1.0.0
*/
export default class ProjectTaskApi {

    /**
    * Constructs a new ProjectTaskApi. 
    * @alias module:api/ProjectTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * get project tasks
     * @param {Number} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTasks} and HTTP response
     */
    projectProjectIdTaskGetWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectProjectIdTaskGet");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectTasks;
      return this.apiClient.callApi(
        '/project/{project_id}/task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get project tasks
     * @param {Number} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTasks}
     */
    projectProjectIdTaskGet(projectId) {
      return this.projectProjectIdTaskGetWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post project task
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTaskInput} [projectTask] project task information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTask} and HTTP response
     */
    projectProjectIdTaskPostWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = opts['projectTask'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectProjectIdTaskPost");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectTask;
      return this.apiClient.callApi(
        '/project/{project_id}/task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post project task
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTaskInput} opts.projectTask project task information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTask}
     */
    projectProjectIdTaskPost(projectId, opts) {
      return this.projectProjectIdTaskPostWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTask} and HTTP response
     */
    projectProjectIdTaskProjectTaskIdDeleteWithHttpInfo(projectId, projectTaskId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectProjectIdTaskProjectTaskIdDelete");
      }
      // verify the required parameter 'projectTaskId' is set
      if (projectTaskId === undefined || projectTaskId === null) {
        throw new Error("Missing the required parameter 'projectTaskId' when calling projectProjectIdTaskProjectTaskIdDelete");
      }

      let pathParams = {
        'project_id': projectId,
        'project_task_id': projectTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectTask;
      return this.apiClient.callApi(
        '/project/{project_id}/task/{project_task_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTask}
     */
    projectProjectIdTaskProjectTaskIdDelete(projectId, projectTaskId) {
      return this.projectProjectIdTaskProjectTaskIdDeleteWithHttpInfo(projectId, projectTaskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTask} and HTTP response
     */
    projectProjectIdTaskProjectTaskIdGetWithHttpInfo(projectId, projectTaskId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectProjectIdTaskProjectTaskIdGet");
      }
      // verify the required parameter 'projectTaskId' is set
      if (projectTaskId === undefined || projectTaskId === null) {
        throw new Error("Missing the required parameter 'projectTaskId' when calling projectProjectIdTaskProjectTaskIdGet");
      }

      let pathParams = {
        'project_id': projectId,
        'project_task_id': projectTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectTask;
      return this.apiClient.callApi(
        '/project/{project_id}/task/{project_task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTask}
     */
    projectProjectIdTaskProjectTaskIdGet(projectId, projectTaskId) {
      return this.projectProjectIdTaskProjectTaskIdGetWithHttpInfo(projectId, projectTaskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * patch project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTaskInput} [projectTask] project task information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTask} and HTTP response
     */
    projectProjectIdTaskProjectTaskIdPatchWithHttpInfo(projectId, projectTaskId, opts) {
      opts = opts || {};
      let postBody = opts['projectTask'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectProjectIdTaskProjectTaskIdPatch");
      }
      // verify the required parameter 'projectTaskId' is set
      if (projectTaskId === undefined || projectTaskId === null) {
        throw new Error("Missing the required parameter 'projectTaskId' when calling projectProjectIdTaskProjectTaskIdPatch");
      }

      let pathParams = {
        'project_id': projectId,
        'project_task_id': projectTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectTask;
      return this.apiClient.callApi(
        '/project/{project_id}/task/{project_task_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * patch project task
     * @param {Number} projectId 
     * @param {Number} projectTaskId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTaskInput} opts.projectTask project task information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTask}
     */
    projectProjectIdTaskProjectTaskIdPatch(projectId, projectTaskId, opts) {
      return this.projectProjectIdTaskProjectTaskIdPatchWithHttpInfo(projectId, projectTaskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
