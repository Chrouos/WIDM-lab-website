/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityImage from '../model/ActivityImage';

/**
* ActivityImage service.
* @module api/ActivityImageApi
* @version 1.0.0
*/
export default class ActivityImageApi {

    /**
    * Constructs a new ActivityImageApi. 
    * @alias module:api/ActivityImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityImage} and HTTP response
     */
    activityActivityIdActivityImageActivityImageUuidDeleteWithHttpInfo(activityId, activityImageUuid) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageActivityImageUuidDelete");
      }
      // verify the required parameter 'activityImageUuid' is set
      if (activityImageUuid === undefined || activityImageUuid === null) {
        throw new Error("Missing the required parameter 'activityImageUuid' when calling activityActivityIdActivityImageActivityImageUuidDelete");
      }

      let pathParams = {
        'activity_id': activityId,
        'activity_image_uuid': activityImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image/{activity_image_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImageActivityImageUuidDelete(activityId, activityImageUuid) {
      return this.activityActivityIdActivityImageActivityImageUuidDeleteWithHttpInfo(activityId, activityImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    activityActivityIdActivityImageActivityImageUuidGetWithHttpInfo(activityId, activityImageUuid) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageActivityImageUuidGet");
      }
      // verify the required parameter 'activityImageUuid' is set
      if (activityImageUuid === undefined || activityImageUuid === null) {
        throw new Error("Missing the required parameter 'activityImageUuid' when calling activityActivityIdActivityImageActivityImageUuidGet");
      }

      let pathParams = {
        'activity_id': activityId,
        'activity_image_uuid': activityImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image/{activity_image_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get activity image
     * @param {Number} activityId 
     * @param {String} activityImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    activityActivityIdActivityImageActivityImageUuidGet(activityId, activityImageUuid) {
      return this.activityActivityIdActivityImageActivityImageUuidGetWithHttpInfo(activityId, activityImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get activity images
     * @param {Number} activityId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityImage} and HTTP response
     */
    activityActivityIdActivityImageGetWithHttpInfo(activityId) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImageGet");
      }

      let pathParams = {
        'activity_id': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get activity images
     * @param {Number} activityId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImageGet(activityId) {
      return this.activityActivityIdActivityImageGetWithHttpInfo(activityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post activity image
     * @param {Number} activityId 
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityImage} and HTTP response
     */
    activityActivityIdActivityImagePostWithHttpInfo(activityId, image) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling activityActivityIdActivityImagePost");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling activityActivityIdActivityImagePost");
      }

      let pathParams = {
        'activity_id': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ActivityImage;
      return this.apiClient.callApi(
        '/activity/{activity_id}/activity-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post activity image
     * @param {Number} activityId 
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityImage}
     */
    activityActivityIdActivityImagePost(activityId, image) {
      return this.activityActivityIdActivityImagePostWithHttpInfo(activityId, image)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
