/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewsImage from '../model/NewsImage';
import NewsImages from '../model/NewsImages';

/**
* NewsImage service.
* @module api/NewsImageApi
* @version 1.0.0
*/
export default class NewsImageApi {

    /**
    * Constructs a new NewsImageApi. 
    * @alias module:api/NewsImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * get news images
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewsImages} and HTTP response
     */
    newsImageGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NewsImages;
      return this.apiClient.callApi(
        '/news/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get news images
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewsImages}
     */
    newsImageGet() {
      return this.newsImageGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete news image
     * @param {String} newsImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewsImage} and HTTP response
     */
    newsImageNewsImageUuidDeleteWithHttpInfo(newsImageUuid) {
      let postBody = null;
      // verify the required parameter 'newsImageUuid' is set
      if (newsImageUuid === undefined || newsImageUuid === null) {
        throw new Error("Missing the required parameter 'newsImageUuid' when calling newsImageNewsImageUuidDelete");
      }

      let pathParams = {
        'news_image_uuid': newsImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NewsImage;
      return this.apiClient.callApi(
        '/news/image/{news_image_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete news image
     * @param {String} newsImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewsImage}
     */
    newsImageNewsImageUuidDelete(newsImageUuid) {
      return this.newsImageNewsImageUuidDeleteWithHttpInfo(newsImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get news image
     * @param {String} newsImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    newsImageNewsImageUuidGetWithHttpInfo(newsImageUuid) {
      let postBody = null;
      // verify the required parameter 'newsImageUuid' is set
      if (newsImageUuid === undefined || newsImageUuid === null) {
        throw new Error("Missing the required parameter 'newsImageUuid' when calling newsImageNewsImageUuidGet");
      }

      let pathParams = {
        'news_image_uuid': newsImageUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/news/image/{news_image_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get news image
     * @param {String} newsImageUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    newsImageNewsImageUuidGet(newsImageUuid) {
      return this.newsImageNewsImageUuidGetWithHttpInfo(newsImageUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post news image
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewsImage} and HTTP response
     */
    newsImagePostWithHttpInfo(image) {
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling newsImagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = NewsImage;
      return this.apiClient.callApi(
        '/news/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post news image
     * @param {File} image 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewsImage}
     */
    newsImagePost(image) {
      return this.newsImagePostWithHttpInfo(image)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
