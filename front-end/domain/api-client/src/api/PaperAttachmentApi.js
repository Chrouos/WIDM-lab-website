/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaperAttachment from '../model/PaperAttachment';

/**
* PaperAttachment service.
* @module api/PaperAttachmentApi
* @version 1.0.0
*/
export default class PaperAttachmentApi {

    /**
    * Constructs a new PaperAttachmentApi. 
    * @alias module:api/PaperAttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete paper attachment
     * @param {Number} paperId 
     * @param {String} paperAttachmentUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperAttachment} and HTTP response
     */
    paperPaperIdPaperAttachmentPaperAttachmentUuidDeleteWithHttpInfo(paperId, paperAttachmentUuid) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAttachmentPaperAttachmentUuidDelete");
      }
      // verify the required parameter 'paperAttachmentUuid' is set
      if (paperAttachmentUuid === undefined || paperAttachmentUuid === null) {
        throw new Error("Missing the required parameter 'paperAttachmentUuid' when calling paperPaperIdPaperAttachmentPaperAttachmentUuidDelete");
      }

      let pathParams = {
        'paper_id': paperId,
        'paper_attachment_uuid': paperAttachmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperAttachment;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-attachment/{paper_attachment_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete paper attachment
     * @param {Number} paperId 
     * @param {String} paperAttachmentUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperAttachment}
     */
    paperPaperIdPaperAttachmentPaperAttachmentUuidDelete(paperId, paperAttachmentUuid) {
      return this.paperPaperIdPaperAttachmentPaperAttachmentUuidDeleteWithHttpInfo(paperId, paperAttachmentUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get paper attachment
     * @param {Number} paperId 
     * @param {String} paperAttachmentUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    paperPaperIdPaperAttachmentPaperAttachmentUuidGetWithHttpInfo(paperId, paperAttachmentUuid) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAttachmentPaperAttachmentUuidGet");
      }
      // verify the required parameter 'paperAttachmentUuid' is set
      if (paperAttachmentUuid === undefined || paperAttachmentUuid === null) {
        throw new Error("Missing the required parameter 'paperAttachmentUuid' when calling paperPaperIdPaperAttachmentPaperAttachmentUuidGet");
      }

      let pathParams = {
        'paper_id': paperId,
        'paper_attachment_uuid': paperAttachmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-attachment/{paper_attachment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get paper attachment
     * @param {Number} paperId 
     * @param {String} paperAttachmentUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    paperPaperIdPaperAttachmentPaperAttachmentUuidGet(paperId, paperAttachmentUuid) {
      return this.paperPaperIdPaperAttachmentPaperAttachmentUuidGetWithHttpInfo(paperId, paperAttachmentUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post paper attachment
     * @param {Number} paperId 
     * @param {File} paperAttachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperAttachment} and HTTP response
     */
    paperPaperIdPaperAttachmentPostWithHttpInfo(paperId, paperAttachment) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperAttachmentPost");
      }
      // verify the required parameter 'paperAttachment' is set
      if (paperAttachment === undefined || paperAttachment === null) {
        throw new Error("Missing the required parameter 'paperAttachment' when calling paperPaperIdPaperAttachmentPost");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'paper_attachment': paperAttachment
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PaperAttachment;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post paper attachment
     * @param {Number} paperId 
     * @param {File} paperAttachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperAttachment}
     */
    paperPaperIdPaperAttachmentPost(paperId, paperAttachment) {
      return this.paperPaperIdPaperAttachmentPostWithHttpInfo(paperId, paperAttachment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
