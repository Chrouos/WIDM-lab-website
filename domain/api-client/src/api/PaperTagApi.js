/**
 * widm-back-end
 * Nation Central University WIDM LAB back-end API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaperTag from '../model/PaperTag';
import PaperTags from '../model/PaperTags';

/**
* PaperTag service.
* @module api/PaperTagApi
* @version 1.0.0
*/
export default class PaperTagApi {

    /**
    * Constructs a new PaperTagApi. 
    * @alias module:api/PaperTagApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * get paper tag
     * @param {Number} paperId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperTags} and HTTP response
     */
    paperPaperIdPaperTagGetWithHttpInfo(paperId) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperTagGet");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperTags;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get paper tag
     * @param {Number} paperId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperTags}
     */
    paperPaperIdPaperTagGet(paperId) {
      return this.paperPaperIdPaperTagGetWithHttpInfo(paperId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * post paper tag
     * @param {Number} paperId 
     * @param {String} tagName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperTag} and HTTP response
     */
    paperPaperIdPaperTagPostWithHttpInfo(paperId, tagName) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperTagPost");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling paperPaperIdPaperTagPost");
      }

      let pathParams = {
        'paper_id': paperId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'tag_name': tagName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PaperTag;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * post paper tag
     * @param {Number} paperId 
     * @param {String} tagName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperTag}
     */
    paperPaperIdPaperTagPost(paperId, tagName) {
      return this.paperPaperIdPaperTagPostWithHttpInfo(paperId, tagName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperTag} and HTTP response
     */
    paperPaperIdPaperTagTagIdDeleteWithHttpInfo(paperId, tagId) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperTagTagIdDelete");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling paperPaperIdPaperTagTagIdDelete");
      }

      let pathParams = {
        'paper_id': paperId,
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperTag;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-tag/{tag_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperTag}
     */
    paperPaperIdPaperTagTagIdDelete(paperId, tagId) {
      return this.paperPaperIdPaperTagTagIdDeleteWithHttpInfo(paperId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperTag} and HTTP response
     */
    paperPaperIdPaperTagTagIdGetWithHttpInfo(paperId, tagId) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperTagTagIdGet");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling paperPaperIdPaperTagTagIdGet");
      }

      let pathParams = {
        'paper_id': paperId,
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaperTag;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-tag/{tag_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperTag}
     */
    paperPaperIdPaperTagTagIdGet(paperId, tagId) {
      return this.paperPaperIdPaperTagTagIdGetWithHttpInfo(paperId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @param {String} tagName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaperTag} and HTTP response
     */
    paperPaperIdPaperTagTagIdPatchWithHttpInfo(paperId, tagId, tagName) {
      let postBody = null;
      // verify the required parameter 'paperId' is set
      if (paperId === undefined || paperId === null) {
        throw new Error("Missing the required parameter 'paperId' when calling paperPaperIdPaperTagTagIdPatch");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling paperPaperIdPaperTagTagIdPatch");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling paperPaperIdPaperTagTagIdPatch");
      }

      let pathParams = {
        'paper_id': paperId,
        'tag_id': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'tag_name': tagName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PaperTag;
      return this.apiClient.callApi(
        '/paper/{paper_id}/paper-tag/{tag_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update tag
     * @param {Number} paperId 
     * @param {Number} tagId 
     * @param {String} tagName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaperTag}
     */
    paperPaperIdPaperTagTagIdPatch(paperId, tagId, tagName) {
      return this.paperPaperIdPaperTagTagIdPatchWithHttpInfo(paperId, tagId, tagName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
